#plot histogram
hist(x, main = "Histogram of Simulated Data",
xlab = "Values", breaks = 10)
# the linear model
output = function(a,x){
y = -1 + a*x
return(y)
}
a <- -0.2
plot(x, y,
main = "Plot of y against x",
xlab = "x values",
ylab = "y values",
col = "blue",
pch = 20)
#i <- 10
#while (i<=15){
#  print(i)
#  i <- i + (1, min = 0, max = 1)
#}
#set seed for reproducibility
set.seed(123)
#Simulate data from a normal distribution where mean=0, sd=1
n <- 5000
true_mean <- 0
true_sd <- 1
x <- rnorm(n, mean = true_mean, sd = true_sd)
#plot histogram
hist(x, main = "Histogram of Simulated Data",
xlab = "Values", breaks = 10)
# the linear model
output = function(a,x){
y = -1 + a*x
return(y)
}
a <- -0.2
plot(x, y,
main = "Plot of y against x",
xlab = "x values",
ylab = "y values",
col = "blue",
pch = 20)
#log-likelihood function
logL = function(a, x, y){
sigma=1
5000*log(1/(sqrt(2*pi)*sigma)) -
1/(sigma^2)*(1/2)*sum((a*x-1 - y)^2)
}
# the range of the model parameter value to be considered#
a.values = seq(-2,2,0.1)
plot(x, y,
main = "Plot of y against x",
xlab = "x values",
ylab = "y values",
col = "blue",
pch = 20)
#MLE
mle_result <- optim(par = a.values,
fn = logL, data = x, sd = true_sd)
#log-likelihood function
logL = function(a, x, y){
sigma=1
5000*log(1/(sqrt(2*pi)*sigma)) -
1/(sigma^2)*(1/2)*sum((a*x-1 - y)^2)
}
# the range of the model parameter value to be considered#
a.values = seq(-2,2,0.1)
plot(x, y,
main = "Plot of y against x",
xlab = "x values",
ylab = "y values",
col = "blue",
pch = 20)
#MLE
mle_result <- optim(par = a.values,
fn = logL, data = x, sd = true_sd)
i <- 10
while (i<=15){
print(i)
i <- i + runif(1, min = 0, max = 1)
}
y <- output(a,x)
plot(x, y,
main = "Plot of y against x",
xlab = "x values",
ylab = "y values",
col = "blue",
pch = 20)
# the linear model
output = function(a,x){
y = -1 + a*x
return(y)
}
a <- -0.2
plot(x, y,
main = "Plot of y against x",
xlab = "x values",
ylab = "y values",
col = "blue",
pch = 20)
return(y)
sigma=1
5000*log(1/(sqrt(2*pi)*sigma)) -
1/(sigma^2)*(1/2)*sum((a*x-1 - y)^2)
return(y)
#log-likelihood function
logL = function(a, x, y){
sigma=1
5000*log(1/(sqrt(2*pi)*sigma)) -
1/(sigma^2)*(1/2)*sum((a*x-1 - y)^2)
return(y)
}
# the range of the model parameter value to be considered#
a.values = seq(-2,2,0.1)
# the range of the model parameter value to be considered#
a.values = seq(-2,2,0.1)
plot(x, y,
main = "Plot of LogL at various a-values",
xlab = "x values",
ylab = "y values",
col = "blue",
pch = 20)
#log-likelihood function
logL = function(a, x, y){
sigma=1
5000*log(1/(sqrt(2*pi)*sigma)) -
1/(sigma^2)*(1/2)*sum((a*x-1 - y)^2)
return(y)
}
# the range of the model parameter value to be considered#
a.values = seq(-2,2,0.1)
plot(x, y,
main = "Plot of LogL at various a-values",
xlab = "x values",
ylab = "y values",
col = "blue",
pch = 20)
```{r}
#log-likelihood function
logL = function(a, x, y){
sigma=1
5000*log(1/(sqrt(2*pi)*sigma)) -
1/(sigma^2)*(1/2)*sum((a*x-1 - y)^2)
}
# the range of the model parameter value to be considered#
a.values = seq(-2,2,0.1)
# log-likelihood values for each a
log_likelihood_values <- sapply(a.values, function(a) logL(a, x, y))
# plot
plot(a.values, log_likelihood_values, type = "l", col = "blue", lwd = 2,
main = "Log-Likelihood Function at Various a-Values",
xlab = "Model Parameter a",
ylab = "Log-Likelihood")
#max log-likelihood value and corresponding a
max_a <- a.values[which.max(log_likelihood_values)]
max_logL <- max(log_likelihood_values)
#max log-likelihood value and corresponding a
max_a <- a.values[which.max(log_likelihood_values)]
max_logL <- max(log_likelihood_values)
print(max_a)
# plot
plot(a.values, log_likelihood_values, type = "l", col = "blue", lwd = 2,
main = "Log-Likelihood Function at Various a-Values",
xlab = "Model Parameter a",
ylab = "Log-Likelihood")
optim(par=0, logL, x=x, y=y,method =  "L-BFGS-B",control = list(fnscale=-1))
# initial value
initial_a <- 0.5
#MLE
mle <- optim(par = initial_a, fn = function(a) -logL(a, x, y),
method = "BFGS", control = list(fnscale = -1))
mle_initial_a <- mle$par
cat("The MLE of a is:", mle_value, "\n")
mle_initial_a <- mle$par
cat("The MLE of a is:", mle_value, "\n")
cat("The MLE of a is:", mle_initial_a, "\n")
print(max_a)
print(MLE$par)
MLE <- optim(par=0, logL, x=x, y=y,method =  "L-BFGS-B",control = list(fnscale=-1))
optim(par=0, logL, x=x, y=y,method =  "L-BFGS-B",control = list(fnscale=-1))
print(MLE$par)
#MLE
MLE <- optim(par = initial_a, fn = logL, x = x, y = y,
method = "L-BFGS-B", control =
initial_alist(fnscale = -1))
# initial value
initial_a <- 0.5
#MLE
MLE <- optim(par = initial_a, fn = logL, x = x, y = y,
method = "L-BFGS-B", control =
initial_alist(fnscale = -1))
#MLE
MLE <- optim(par = initial_a, fn = logL, x = x, y = y,
method = "L-BFGS-B", control =
list(fnscale = -1))
print(MLE$par)
# the linear model
output = function(a,x){
y = -1 + a*x
return(y)
}
a <- -0.2
plot(x, y,
main = "Plot of y against x",
xlab = "x values",
ylab = "y values",
col = "blue",
pch = 20)
# the linear model
output = function(a,x){
y = -1 + a*x
return(y)
}
#define y
y <- output(a, x)
#define a-model parameter
a <- -0.2
plot(x, y,
main = "Plot of y against x",
xlab = "x values",
ylab = "y values",
col = "blue",
pch = 20)
#define a-model parameter
a <- -0.2
# the linear model
output = function(a,x){
y = -1 + a*x
return(y)
}
#define y
y <- output(a, x)
plot(x, y,
main = "Plot of y against x",
xlab = "x values",
ylab = "y values",
col = "blue",
pch = 20)
# Acronym legend (to include as a note below the plot in presentations or manually in the document):
# IHD = Ischemic Heart Disease
# PAD = Peripheral Arterial Disease
# AA = Aortic Aneurysm
# CV = Cardiovascular
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Create the dataset
cvd_data <- data.frame(
Cause = c("Ischemic Heart Disease (IHD)",
"Stroke (ischemic/hemorrhagic)",
"Hypertensive Heart Disease",
"Other CV diseases (PAD/AA)",
"Valve Disease",
"Cardiac Infection/Myopathy",
"Atrial Fibrillation and Flutter"),
Percentage = c(49.2, 35.2, 6.2, 2.8, 2.5, 2.2, 1.7)
)
# Reorder factor levels for descending order
cvd_data$Cause <- factor(cvd_data$Cause, levels = cvd_data$Cause[order(cvd_data$Percentage)])
# Define a color-blind friendly palette (ColorBrewer Set2)
cb_palette <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494")
# Plot horizontal bar chart
ggplot(cvd_data, aes(x = Percentage, y = Cause, fill = Cause)) +
geom_bar(stat = "identity", color = "black", width = 0.7) +
scale_fill_manual(values = cb_palette) +  # Apply color-blind friendly palette
geom_text(aes(label = paste0(Percentage, "%")), hjust = -0.1, size = 4) +  # Add percentage labels
labs(
title = "Proportion of Cardiovascular Deaths by Cause (2019)",
x = "Percentage (%)",
y = "Cause",
fill = "Cause"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 14),
axis.title.y = element_blank(),  # Optional: remove redundant y-axis label
legend.position = "none"  # Legend is redundant since causes are labeled
) +
coord_cartesian(xlim = c(0, 55))  # Adjust limit for better label spacing
# Acronym legend (to include as a note below the plot in presentations or manually in the document):
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Create the dataset
cvd_data <- data.frame(
Cause = c("Ischemic Heart Disease (IHD)",
"Stroke (ischemic/hemorrhagic)",
"Hypertensive Heart Disease",
"Other CV diseases (PAD/AA)",
"Valve Disease",
"Cardiac Infection/Myopathy",
"Atrial Fibrillation and Flutter"),
Percentage = c(49.2, 35.2, 6.2, 2.8, 2.5, 2.2, 1.7)
)
# Reorder factor levels for descending order
cvd_data$Cause <- factor(cvd_data$Cause, levels = cvd_data$Cause[order(cvd_data$Percentage)])
# Define a color-blind friendly palette (ColorBrewer Set2)
cb_palette <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494")
# Plot horizontal bar chart with x-axis scaled to 100%
ggplot(cvd_data, aes(x = Percentage, y = Cause, fill = Cause)) +
geom_bar(stat = "identity", color = "black", width = 0.7) +
scale_fill_manual(values = cb_palette) +  # Apply color-blind friendly palette
geom_text(aes(label = paste0(Percentage, "%")), hjust = -0.1, size = 4) +  # Add percentage labels
labs(
title = "Proportion of Cardiovascular Deaths by Cause (2019)",
x = "Percentage (%)",
y = "Cause",
fill = "Cause"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 14),
axis.title.y = element_blank(),  # Optional: remove redundant y-axis label
legend.position = "none"  # Legend is redundant since causes are labeled
) +
# Load necessary libraries
library(ggplot2)
# Create the dataset
cvd_data <- data.frame(
Cause = c("Ischemic Heart Disease (IHD)",
"Stroke (ischemic/hemorrhagic)",
"Hypertensive Heart Disease",
"Other CV diseases (PAD/AA)",
"Valve Disease",
"Cardiac Infection/Myopathy",
"Atrial Fibrillation and Flutter"),
Percentage = c(49.2, 35.2, 6.2, 2.8, 2.5, 2.2, 1.7)
)
# Reorder factor levels for descending order
cvd_data$Cause <- factor(cvd_data$Cause, levels = cvd_data$Cause[order(cvd_data$Percentage)])
# Define a color-blind friendly palette (ColorBrewer Set2)
cb_palette <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494")
# Plot horizontal bar chart with x-axis scaled to 100%
ggplot(cvd_data, aes(x = Percentage, y = Cause, fill = Cause)) +
geom_bar(stat = "identity", color = "black", width = 0.7) +
scale_fill_manual(values = cb_palette) +  # Apply color-blind friendly palette
geom_text(aes(label = paste0(Percentage, "%")), hjust = -0.1, size = 4) +  # Add percentage labels
labs(
title = "Proportion of Cardiovascular Deaths by Cause (2019)",
x = "Percentage (%)",
y = "Cause",
fill = "Cause"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 14),
axis.title.y = element_blank(),  # Optional: remove redundant y-axis label
legend.position = "none"  # Legend is redundant since causes are labeled
) +
coord_cartesian(xlim = c(0, 100))  # Ensure x-axis goes from 0 to 100%
# Create the updated dataset with acronyms spelled out
cvd_data <- data.frame(
Cause = c("Ischemic Heart Disease (IHD)",
"Stroke (ischemic/hemorrhagic)",
"Hypertensive Heart Disease",
"Other Cardiovascular Diseases (including Peripheral Arterial Disease (PAD) and Aortic Aneurysm (AA))",
"Valve Disease",
"Cardiac Infection/Myopathy",
"Atrial Fibrillation and Flutter"),
Percentage = c(49.2, 35.2, 6.2, 2.8, 2.5, 2.2, 1.7)
)
# Reorder factor levels for descending order
cvd_data$Cause <- factor(cvd_data$Cause, levels = cvd_data$Cause[order(cvd_data$Percentage)])
# Define a color-blind friendly palette (ColorBrewer Set2)
cb_palette <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494")
# Plot horizontal bar chart with x-axis scaled to 100%
ggplot(cvd_data, aes(x = Percentage, y = Cause, fill = Cause)) +
geom_bar(stat = "identity", color = "black", width = 0.7) +
scale_fill_manual(values = cb_palette) +  # Apply color-blind friendly palette
geom_text(aes(label = paste0(Percentage, "%")), hjust = -0.1, size = 4) +  # Add percentage labels
labs(
title = "Proportion of Cardiovascular Deaths by Cause (2019)",
x = "Percentage (%)",
y = "Cause",
fill = "Cause"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 14),
axis.title.y = element_blank(),  # Optional: remove redundant y-axis label
legend.position = "none"  # Legend is redundant since causes are labeled
) +
coord_cartesian(xlim = c(0, 100))  # Ensure x-axis goes from 0 to 100%
# Create the updated dataset with acronyms spelled out
cvd_data <- data.frame(
Cause = c("Ischemic Heart Disease (IHD)",
"Stroke (ischemic/hemorrhagic)",
"Hypertensive Heart Disease",
"Other Cardiovascular Diseases
(Peripheral Arterial Disease (PAD)/Aortic Aneurysm (AA))",
"Valve Disease",
"Cardiac Infection/Myopathy",
"Atrial Fibrillation and Flutter"),
Percentage = c(49.2, 35.2, 6.2, 2.8, 2.5, 2.2, 1.7)
)
# Reorder factor levels for descending order
cvd_data$Cause <- factor(cvd_data$Cause, levels = cvd_data$Cause[order(cvd_data$Percentage)])
# Define a color-blind friendly palette (ColorBrewer Set2)
cb_palette <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494")
# Plot horizontal bar chart with x-axis scaled to 100%
ggplot(cvd_data, aes(x = Percentage, y = Cause, fill = Cause)) +
geom_bar(stat = "identity", color = "black", width = 0.7) +
scale_fill_manual(values = cb_palette) +  # Apply color-blind friendly palette
geom_text(aes(label = paste0(Percentage, "%")), hjust = -0.1, size = 4) +  # Add percentage labels
labs(
title = "Proportion of Cardiovascular Deaths by Cause (2019)",
x = "Percentage (%)",
y = "Cause",
fill = "Cause"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 14),
axis.title.y = element_blank(),  # Optional: remove redundant y-axis label
legend.position = "none"  # Legend is redundant since causes are labeled
) +
coord_cartesian(xlim = c(0, 100))  # Ensure x-axis goes from 0 to 100%
# Plot horizontal bar chart with x-axis scaled to 100%
ggplot(cvd_data, aes(x = Percentage, y = Cause, fill = Cause)) +
geom_bar(stat = "identity", color = "black", width = 0.7) +
scale_fill_manual(values = cb_palette) +  # Apply color-blind friendly palette
geom_text(aes(label = paste0(Percentage, "%")), hjust = -0.1, size = 4) +  # Add percentage labels
labs(
title = "Proportion of Cardiovascular Deaths by Cause Globally (2019)",
x = "Percentage (%)",
y = "Cause",
fill = "Cause"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 14),
axis.title.y = element_blank(),  # Optional: remove redundant y-axis label
legend.position = "none"  # Legend is redundant since causes are labeled
) +
coord_cartesian(xlim = c(0, 100))  # Ensure x-axis goes from 0 to 100%
# Plot
cvd_plot <- ggplot(cvd_data, aes(x = Percentage, y = Cause, fill = Cause)) +
geom_bar(stat = "identity", color = "black", width = 0.7) +
scale_fill_manual(values = cb_palette) +
geom_text(aes(label = paste0(Percentage, "%")), hjust = -0.1, size = 4) +
labs(
title = "Proportion of Cardiovascular Deaths\nby Cause GLobally (2019)",
x = "Percentage (%)",
y = "Cause"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 13),
axis.title.y = element_blank(),
legend.position = "none",
plot.margin = margin(20, 20, 20, 20)  # Margins to prevent clipping
) +
coord_cartesian(xlim = c(0, 100))
# Wrap long labels
cvd_data$Cause <- str_wrap(cvd_data$Cause, width = 40)
# Order factors
cvd_data$Cause <- factor(cvd_data$Cause, levels = cvd_data$Cause[order(cvd_data$Percentage)])
# Palette
cb_palette <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494")
# Plot
cvd_plot <- ggplot(cvd_data, aes(x = Percentage, y = Cause, fill = Cause)) +
geom_bar(stat = "identity", color = "black", width = 0.7) +
scale_fill_manual(values = cb_palette) +
geom_text(aes(label = paste0(Percentage, "%")), hjust = -0.1, size = 4) +
labs(
title = "Proportion of Cardiovascular Deaths\nby Cause GLobally (2019)",
x = "Percentage (%)",
y = "Cause"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 13),
axis.title.y = element_blank(),
legend.position = "none",
plot.margin = margin(20, 20, 20, 20)  # Margins to prevent clipping
) +
coord_cartesian(xlim = c(0, 100))
# Save plot as PNG (high resolution, good for Word)
ggsave("cvd_bar_chart.png", plot = cvd_plot, width = 8, height = 5, dpi = 300)
# OPTIONAL: Save as PDF for vector quality (resizable in Word without losing quality)
ggsave("cvd_bar_chart.pdf", plot = cvd_plot, width = 8, height = 5)
version
help(package="Rcpp")
install.packages("flexdashboard")
install.packages("leaflet")
library(flexdashboard)
library(shiny)
library(leaflet)
library(sf)
library(readr)
library(lubridate)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(CDCPLACES)
library(plotly)
library(rsconnect)
Obesity <- get_places(state = c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY"),
measure = "OBESITY",
release = "2024",
geometry = TRUE) %>%
filter(datavaluetypeid == "AgeAdjPrv")
LPA <- get_places(state = c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY"),
measure = "LPA",
release = "2024",
geometry = TRUE) %>%
filter(datavaluetypeid == "AgeAdjPrv")
rsconnect::setAccountInfo(name='stephanie-a-ponce',
token='5EC29BE421999A79014DB3305315AD89',
secret='22ZDfpvDvhDzqsKpIxTPUXS3unsxPU5vMLIXeu9o')
setwd("~/EMORY/ACADEMICS/Spring_25/Data ILE/GA_DASHBOARD")
setwd("~/EMORY/ACADEMICS/Spring_25/Data ILE/GA_DASHBOARD")
